{
  "_format": "hh3-sol-build-info-1",
  "id": "solc-0_8_28-b8a0aa8c66dd3dee5a154d931e5c4773a89d60d6",
  "solcVersion": "0.8.28",
  "solcLongVersion": "0.8.28+commit.7893614a",
  "userSourceNameMap": {
    "contracts/SealedVote.sol": "project/contracts/SealedVote.sol"
  },
  "input": {
    "language": "Solidity",
    "settings": {
      "evmVersion": "cancun",
      "optimizer": {
        "enabled": true,
        "runs": 200
      },
      "outputSelection": {
        "*": {
          "": [
            "ast"
          ],
          "*": [
            "abi",
            "evm.bytecode",
            "evm.deployedBytecode",
            "evm.methodIdentifiers",
            "metadata"
          ]
        }
      },
      "remappings": []
    },
    "sources": {
      "project/contracts/SealedVote.sol": {
        "content": "/** SPDX-License-Identifier: MIT */\npragma solidity ^0.8.24;\n\ncontract SealedVote {\n    struct Poll {\n        uint64 commitEnd;\n        uint64 revealEnd;\n        uint8  numOptions;\n        bool   finalized;\n        address creator;\n        mapping(address => bytes32) commitment;\n        mapping(address => bool) revealed;\n        uint32[] tally;\n    }\n\n    mapping(uint256 => Poll) private _polls;\n    uint256 public pollCount;\n\n    event PollCreated(uint256 indexed pollId, address indexed creator, uint8 numOptions, uint64 commitEnd, uint64 revealEnd);\n    event Committed(uint256 indexed pollId, address indexed voter);\n    event Revealed(uint256 indexed pollId, address indexed voter, uint8 optionIndex);\n    event Finalized(uint256 indexed pollId, uint8 winningOption);\n\n    function createPoll(uint8 numOptions, uint32 commitSeconds, uint32 revealSeconds)\n        external returns (uint256 pollId)\n    {\n        require(numOptions >= 2 && numOptions <= 8, \"bad options\");\n        uint64 commitEnd = uint64(block.timestamp + commitSeconds);\n        uint64 revealEnd = uint64(commitEnd + revealSeconds);\n\n        pollId = ++pollCount;\n        Poll storage p = _polls[pollId];\n        p.commitEnd = commitEnd;\n        p.revealEnd = revealEnd;\n        p.numOptions = numOptions;\n        p.creator = msg.sender;\n        p.tally = new uint32[](numOptions);\n\n        emit PollCreated(pollId, msg.sender, numOptions, commitEnd, revealEnd);\n    }\n\n    function commit(uint256 pollId, bytes32 commitment) external {\n        Poll storage p = _polls[pollId];\n        require(block.timestamp < p.commitEnd, \"commit over\");\n        require(p.commitment[msg.sender] == bytes32(0), \"already committed\");\n        p.commitment[msg.sender] = commitment;\n        emit Committed(pollId, msg.sender);\n    }\n\n    function reveal(uint256 pollId, uint8 optionIndex, bytes32 salt) external {\n        Poll storage p = _polls[pollId];\n        require(block.timestamp >= p.commitEnd && block.timestamp < p.revealEnd, \"not reveal phase\");\n        require(optionIndex < p.numOptions, \"bad option\");\n        bytes32 c = p.commitment[msg.sender];\n        require(c != bytes32(0), \"no commit\");\n        require(!p.revealed[msg.sender], \"already revealed\");\n\n        bytes32 recomputed = keccak256(abi.encodePacked(optionIndex, salt, msg.sender, pollId));\n        require(recomputed == c, \"mismatch\");\n\n        p.revealed[msg.sender] = true;\n        p.tally[optionIndex] += 1;\n        emit Revealed(pollId, msg.sender, optionIndex);\n    }\n\n    function finalize(uint256 pollId) external returns (uint8 winning) {\n        Poll storage p = _polls[pollId];\n        require(!p.finalized, \"finalized\");\n        require(block.timestamp >= p.revealEnd, \"reveal not over\");\n        uint32 maxVotes = 0;\n        for (uint8 i = 0; i < p.numOptions; i++) {\n            if (p.tally[i] > maxVotes) { maxVotes = p.tally[i]; winning = i; }\n        }\n        p.finalized = true;\n        emit Finalized(pollId, winning);\n    }\n\n    // Views for frontend\n    function getPollTimes(uint256 pollId) external view returns (uint64 commitEnd, uint64 revealEnd) {\n        Poll storage p = _polls[pollId];\n        return (p.commitEnd, p.revealEnd);\n    }\n    function getNumOptions(uint256 pollId) external view returns (uint8) {\n        return _polls[pollId].numOptions;\n    }\n    function getTally(uint256 pollId) external view returns (uint32[] memory tally, bool finalized) {\n        Poll storage p = _polls[pollId];\n        return (p.tally, p.finalized);\n    }\n    function hasCommitted(uint256 pollId, address voter) external view returns (bool) {\n        return _polls[pollId].commitment[voter] != bytes32(0);\n    }\n    function hasRevealed(uint256 pollId, address voter) external view returns (bool) {\n        return _polls[pollId].revealed[voter];\n    }\n}\n"
      }
    }
  }
}